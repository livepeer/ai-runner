ARG BASE_IMAGE=livepeer/comfyui-base:latest
FROM ${BASE_IMAGE}

# -----------------------------------------------------------------------------
# live-base: This section was copied from live-base since we don't use it as base image above
# -----------------------------------------------------------------------------

ENV DEBIAN_FRONTEND=noninteractive
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,video

# Install prerequisites
RUN apt-get update && \
    apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev \
    libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
    xz-utils tk-dev libffi-dev liblzma-dev python3-openssl git runit libzmq3-dev && \
    rm -rf /var/lib/apt/lists/*

# Keep python installation from base image

# Install ffmpeg

RUN apt-get update && apt-get install -y --no-install-recommends \
    autoconf automake build-essential cmake git-core libtool pkg-config wget \
    nasm yasm zlib1g-dev libpng-dev libx264-dev libopus-dev libfdk-aac-dev && \
    rm -rf /var/lib/apt/lists/*

# Set up environment variables
ENV NV_CODEC_HEADERS=/usr/local/cuda/include/ffnvcodec/
RUN git clone -b n12.2.72.0 --depth 1 https://git.videolan.org/git/ffmpeg/nv-codec-headers.git && \
    cd nv-codec-headers && \
    make && \
    make install && \
    cd .. && rm -rf nv-codec-headers

# Clone the FFmpeg repository and checkout the latest release
RUN git clone --branch n7.1 --depth 1 https://github.com/FFmpeg/FFmpeg.git ffmpeg

# Build FFmpeg with shared libraries and hardware acceleration
RUN cd ffmpeg && \
    ./configure --prefix=/compiled \
                --extra-cflags="-I/ffmpeg_build/include -I/usr/local/cuda/include" \
                --extra-ldflags="-L/ffmpeg_build/lib -L/usr/local/cuda/lib64" \
                --enable-nonfree \
                --enable-cuda-nvcc \
                --enable-cuda \
                --enable-libnpp \
                --enable-cuvid \
                --enable-nvenc \
                --enable-nvdec \
                --enable-gpl \
                --enable-shared \
                --disable-static \
                --enable-libx264 \
                --enable-libopus \
                --enable-libfdk-aac \
                --disable-debug \
                --disable-doc && \
    make -j$(nproc) && \
    make install && \
    make distclean

# Copy the compiled FFmpeg binaries to /usr/local
RUN cp -R /compiled/* /usr/local/

# Clean up APT cache to reduce image size
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# -----------------------------------------------------------------------------
# live-base: End of section
# -----------------------------------------------------------------------------

# TODO: Delete if not needed
# Upgrade TensorRT to 10.6.0
# RUN pip uninstall -y tensorrt && \
#     pip install tensorrt==10.6.0

# Set up ComfyUI workspace
ENV COMFY_UI_WORKSPACE="/ComfyUI"
ENV PYTHONPATH=/ComfyUI:${PYTHONPATH}
RUN rm -rf /ComfyUI/models && ln -s /models/ComfyUI--models /ComfyUI/models
RUN rm -rf /ComfyUI/output && ln -s /models/ComfyUI--output /ComfyUI/output

# Ensure all the next RUN commands are run in the comfystream conda environment
RUN echo "source /miniconda3/etc/profile.d/conda.sh && conda activate comfystream" >> /conda_activate.sh && \
    chmod +x /conda_activate.sh
ENV BASH_ENV=/conda_activate.sh
SHELL ["/bin/bash", "-c"]
# Ensure the app run from CMD is also in the comfystream conda environment (just wrap in bash and it will run the .bashrc above)
ENTRYPOINT ["bash", "-c", "exec /opt/nvidia/nvidia_entrypoint.sh \"$@\"", "--"]
