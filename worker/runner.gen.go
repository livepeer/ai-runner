// Package worker provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package worker

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	HTTPBearerScopes = "HTTPBearer.Scopes"
)

// APIError API error response model.
type APIError struct {
	// Msg The error message.
	Msg string `json:"msg"`
}

// BodyGenAudioToText defines model for Body_genAudioToText.
type BodyGenAudioToText struct {
	// Audio Uploaded audio file to be transcribed.
	Audio openapi_types.File `json:"audio"`

	// ModelId Hugging Face model ID used for transcription.
	ModelId *string `json:"model_id,omitempty"`
}

// BodyGenImageToImage defines model for Body_genImageToImage.
type BodyGenImageToImage struct {
	// GuidanceScale Encourages model to generate images closely linked to the text prompt (higher values may reduce image quality).
	GuidanceScale *float32 `json:"guidance_scale,omitempty"`

	// Image Uploaded image to modify with the pipeline.
	Image openapi_types.File `json:"image"`

	// ImageGuidanceScale Degree to which the generated image is pushed towards the initial image.
	ImageGuidanceScale *float32 `json:"image_guidance_scale,omitempty"`

	// Loras A LoRA (Low-Rank Adaptation) model and its corresponding weight for image generation. Example: { "latent-consistency/lcm-lora-sdxl": 1.0, "nerijs/pixel-art-xl": 1.2}.
	Loras *string `json:"loras,omitempty"`

	// ModelId Hugging Face model ID used for image generation.
	ModelId *string `json:"model_id,omitempty"`

	// NegativePrompt Text prompt(s) to guide what to exclude from image generation. Ignored if guidance_scale < 1.
	NegativePrompt *string `json:"negative_prompt,omitempty"`

	// NumImagesPerPrompt Number of images to generate per prompt.
	NumImagesPerPrompt *int `json:"num_images_per_prompt,omitempty"`

	// NumInferenceSteps Number of denoising steps. More steps usually lead to higher quality images but slower inference. Modulated by strength.
	NumInferenceSteps *int `json:"num_inference_steps,omitempty"`

	// Prompt Text prompt(s) to guide image generation.
	Prompt string `json:"prompt"`

	// SafetyCheck Perform a safety check to estimate if generated images could be offensive or harmful.
	SafetyCheck *bool `json:"safety_check,omitempty"`

	// Seed Seed for random number generation.
	Seed *int `json:"seed,omitempty"`

	// Strength Degree of transformation applied to the reference image (0 to 1).
	Strength *float32 `json:"strength,omitempty"`
}

// BodyGenImageToText defines model for Body_genImageToText.
type BodyGenImageToText struct {
	// Image Uploaded image to transform with the pipeline.
	Image openapi_types.File `json:"image"`

	// ModelId Hugging Face model ID used for transformation.
	ModelId *string `json:"model_id,omitempty"`

	// Prompt Text prompt(s) to guide transformation.
	Prompt *string `json:"prompt,omitempty"`
}

// BodyGenImageToVideo defines model for Body_genImageToVideo.
type BodyGenImageToVideo struct {
	// Fps The frames per second of the generated video.
	Fps *int `json:"fps,omitempty"`

	// Height The height in pixels of the generated video.
	Height *int `json:"height,omitempty"`

	// Image Uploaded image to generate a video from.
	Image openapi_types.File `json:"image"`

	// ModelId Hugging Face model ID used for video generation.
	ModelId *string `json:"model_id,omitempty"`

	// MotionBucketId Used for conditioning the amount of motion for the generation. The higher the number the more motion will be in the video.
	MotionBucketId *int `json:"motion_bucket_id,omitempty"`

	// NoiseAugStrength Amount of noise added to the conditioning image. Higher values reduce resemblance to the conditioning image and increase motion.
	NoiseAugStrength *float32 `json:"noise_aug_strength,omitempty"`

	// NumInferenceSteps Number of denoising steps. More steps usually lead to higher quality images but slower inference. Modulated by strength.
	NumInferenceSteps *int `json:"num_inference_steps,omitempty"`

	// SafetyCheck Perform a safety check to estimate if generated images could be offensive or harmful.
	SafetyCheck *bool `json:"safety_check,omitempty"`

	// Seed Seed for random number generation.
	Seed *int `json:"seed,omitempty"`

	// Width The width in pixels of the generated video.
	Width *int `json:"width,omitempty"`
}

// BodyGenLLM defines model for Body_genLLM.
type BodyGenLLM struct {
	History     *string  `json:"history,omitempty"`
	MaxTokens   *int     `json:"max_tokens,omitempty"`
	ModelId     *string  `json:"model_id,omitempty"`
	Prompt      string   `json:"prompt"`
	Stream      *bool    `json:"stream,omitempty"`
	SystemMsg   *string  `json:"system_msg,omitempty"`
	Temperature *float32 `json:"temperature,omitempty"`
}

// BodyGenSegmentAnything2 defines model for Body_genSegmentAnything2.
type BodyGenSegmentAnything2 struct {
	// Box A length 4 array given as a box prompt to the model, in XYXY format.
	Box *string `json:"box,omitempty"`

	// Image Image to segment.
	Image openapi_types.File `json:"image"`

	// MaskInput A low-resolution mask input to the model, typically from a previous prediction iteration, with the form 1xHxW (H=W=256 for SAM).
	MaskInput *string `json:"mask_input,omitempty"`

	// ModelId Hugging Face model ID used for image generation.
	ModelId *string `json:"model_id,omitempty"`

	// MultimaskOutput If true, the model will return three masks for ambiguous input prompts, often producing better masks than a single prediction.
	MultimaskOutput *bool `json:"multimask_output,omitempty"`

	// NormalizeCoords If true, the point coordinates will be normalized to the range [0,1], with point_coords expected to be with respect to image dimensions.
	NormalizeCoords *bool `json:"normalize_coords,omitempty"`

	// PointCoords Nx2 array of point prompts to the model, where each point is in (X,Y) in pixels.
	PointCoords *string `json:"point_coords,omitempty"`

	// PointLabels Labels for the point prompts, where 1 indicates a foreground point and 0 indicates a background point.
	PointLabels *string `json:"point_labels,omitempty"`

	// ReturnLogits If true, returns un-thresholded mask logits instead of a binary mask.
	ReturnLogits *bool `json:"return_logits,omitempty"`
}

// BodyGenUpscale defines model for Body_genUpscale.
type BodyGenUpscale struct {
	// Image Uploaded image to modify with the pipeline.
	Image openapi_types.File `json:"image"`

	// ModelId Hugging Face model ID used for upscaled image generation.
	ModelId *string `json:"model_id,omitempty"`

	// NumInferenceSteps Number of denoising steps. More steps usually lead to higher quality images but slower inference. Modulated by strength.
	NumInferenceSteps *int `json:"num_inference_steps,omitempty"`

	// Prompt Text prompt(s) to guide upscaled image generation.
	Prompt string `json:"prompt"`

	// SafetyCheck Perform a safety check to estimate if generated images could be offensive or harmful.
	SafetyCheck *bool `json:"safety_check,omitempty"`

	// Seed Seed for random number generation.
	Seed *int `json:"seed,omitempty"`
}

// HTTPError HTTP error response model.
type HTTPError struct {
	// Detail Detailed error information.
	Detail APIError `json:"detail"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// HealthCheck defines model for HealthCheck.
type HealthCheck struct {
	Status *string `json:"status,omitempty"`
}

// ImageResponse Response model for image generation.
type ImageResponse struct {
	// Images The generated images.
	Images []Media `json:"images"`
}

// ImageToTextResponse Response model for text generation.
type ImageToTextResponse struct {
	// Text The generated text.
	Text string `json:"text"`
}

// LLMResponse defines model for LLMResponse.
type LLMResponse struct {
	Response   string `json:"response"`
	TokensUsed int    `json:"tokens_used"`
}

// MasksResponse Response model for object segmentation.
type MasksResponse struct {
	// Logits The raw, unnormalized predictions (logits) for the masks.
	Logits string `json:"logits"`

	// Masks The generated masks.
	Masks string `json:"masks"`

	// Scores The model's confidence scores for each generated mask.
	Scores string `json:"scores"`
}

// Media A media object containing information about the generated media.
type Media struct {
	// Nsfw Whether the media was flagged as NSFW.
	Nsfw bool `json:"nsfw"`

	// Seed The seed used to generate the media.
	Seed int `json:"seed"`

	// Url The URL where the media can be accessed.
	Url string `json:"url"`
}

// TextResponse Response model for text generation.
type TextResponse struct {
	// Chunks The generated text chunks.
	Chunks []Chunk `json:"chunks"`

	// Text The generated text.
	Text string `json:"text"`
}

// TextToImageParams defines model for TextToImageParams.
type TextToImageParams struct {
	// GuidanceScale Encourages model to generate images closely linked to the text prompt (higher values may reduce image quality).
	GuidanceScale *float32 `json:"guidance_scale,omitempty"`

	// Height The height in pixels of the generated image.
	Height *int `json:"height,omitempty"`

	// Loras A LoRA (Low-Rank Adaptation) model and its corresponding weight for image generation. Example: { "latent-consistency/lcm-lora-sdxl": 1.0, "nerijs/pixel-art-xl": 1.2}.
	Loras *string `json:"loras,omitempty"`

	// ModelId Hugging Face model ID used for image generation.
	ModelId *string `json:"model_id,omitempty"`

	// NegativePrompt Text prompt(s) to guide what to exclude from image generation. Ignored if guidance_scale < 1.
	NegativePrompt *string `json:"negative_prompt,omitempty"`

	// NumImagesPerPrompt Number of images to generate per prompt.
	NumImagesPerPrompt *int `json:"num_images_per_prompt,omitempty"`

	// NumInferenceSteps Number of denoising steps. More steps usually lead to higher quality images but slower inference. Modulated by strength.
	NumInferenceSteps *int `json:"num_inference_steps,omitempty"`

	// Prompt Text prompt(s) to guide image generation. Separate multiple prompts with '|' if supported by the model.
	Prompt string `json:"prompt"`

	// SafetyCheck Perform a safety check to estimate if generated images could be offensive or harmful.
	SafetyCheck *bool `json:"safety_check,omitempty"`

	// Seed Seed for random number generation.
	Seed *int `json:"seed,omitempty"`

	// Width The width in pixels of the generated image.
	Width *int `json:"width,omitempty"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// VideoResponse Response model for video generation.
type VideoResponse struct {
	// Frames The generated video frames.
	Frames [][]Media `json:"frames"`
}

// Chunk A chunk of text with a timestamp.
type Chunk struct {
	// Text The text of the chunk.
	Text string `json:"text"`

	// Timestamp The timestamp of the chunk.
	Timestamp []interface{} `json:"timestamp"`
}

// GenAudioToTextMultipartRequestBody defines body for GenAudioToText for multipart/form-data ContentType.
type GenAudioToTextMultipartRequestBody = BodyGenAudioToText

// GenImageToImageMultipartRequestBody defines body for GenImageToImage for multipart/form-data ContentType.
type GenImageToImageMultipartRequestBody = BodyGenImageToImage

// GenImageToTextMultipartRequestBody defines body for GenImageToText for multipart/form-data ContentType.
type GenImageToTextMultipartRequestBody = BodyGenImageToText

// GenImageToVideoMultipartRequestBody defines body for GenImageToVideo for multipart/form-data ContentType.
type GenImageToVideoMultipartRequestBody = BodyGenImageToVideo

// GenLLMFormdataRequestBody defines body for GenLLM for application/x-www-form-urlencoded ContentType.
type GenLLMFormdataRequestBody = BodyGenLLM

// GenSegmentAnything2MultipartRequestBody defines body for GenSegmentAnything2 for multipart/form-data ContentType.
type GenSegmentAnything2MultipartRequestBody = BodyGenSegmentAnything2

// GenTextToImageJSONRequestBody defines body for GenTextToImage for application/json ContentType.
type GenTextToImageJSONRequestBody = TextToImageParams

// GenUpscaleMultipartRequestBody defines body for GenUpscale for multipart/form-data ContentType.
type GenUpscaleMultipartRequestBody = BodyGenUpscale

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GenAudioToTextWithBody request with any body
	GenAudioToTextWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Health request
	Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenImageToImageWithBody request with any body
	GenImageToImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenImageToTextWithBody request with any body
	GenImageToTextWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenImageToVideoWithBody request with any body
	GenImageToVideoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenLLMWithBody request with any body
	GenLLMWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenLLMWithFormdataBody(ctx context.Context, body GenLLMFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenSegmentAnything2WithBody request with any body
	GenSegmentAnything2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenTextToImageWithBody request with any body
	GenTextToImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenTextToImage(ctx context.Context, body GenTextToImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenUpscaleWithBody request with any body
	GenUpscaleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GenAudioToTextWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenAudioToTextRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenImageToImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenImageToImageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenImageToTextWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenImageToTextRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenImageToVideoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenImageToVideoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenLLMWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenLLMRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenLLMWithFormdataBody(ctx context.Context, body GenLLMFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenLLMRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenSegmentAnything2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenSegmentAnything2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenTextToImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenTextToImageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenTextToImage(ctx context.Context, body GenTextToImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenTextToImageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenUpscaleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenUpscaleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGenAudioToTextRequestWithBody generates requests for GenAudioToText with any type of body
func NewGenAudioToTextRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio-to-text")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHealthRequest generates requests for Health
func NewHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenImageToImageRequestWithBody generates requests for GenImageToImage with any type of body
func NewGenImageToImageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/image-to-image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenImageToTextRequestWithBody generates requests for GenImageToText with any type of body
func NewGenImageToTextRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/image-to-text")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenImageToVideoRequestWithBody generates requests for GenImageToVideo with any type of body
func NewGenImageToVideoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/image-to-video")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenLLMRequestWithFormdataBody calls the generic GenLLM builder with application/x-www-form-urlencoded body
func NewGenLLMRequestWithFormdataBody(server string, body GenLLMFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGenLLMRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGenLLMRequestWithBody generates requests for GenLLM with any type of body
func NewGenLLMRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/llm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenSegmentAnything2RequestWithBody generates requests for GenSegmentAnything2 with any type of body
func NewGenSegmentAnything2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segment-anything-2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenTextToImageRequest calls the generic GenTextToImage builder with application/json body
func NewGenTextToImageRequest(server string, body GenTextToImageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenTextToImageRequestWithBody(server, "application/json", bodyReader)
}

// NewGenTextToImageRequestWithBody generates requests for GenTextToImage with any type of body
func NewGenTextToImageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/text-to-image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenUpscaleRequestWithBody generates requests for GenUpscale with any type of body
func NewGenUpscaleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/upscale")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GenAudioToTextWithBodyWithResponse request with any body
	GenAudioToTextWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenAudioToTextResponse, error)

	// HealthWithResponse request
	HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthResponse, error)

	// GenImageToImageWithBodyWithResponse request with any body
	GenImageToImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenImageToImageResponse, error)

	// GenImageToTextWithBodyWithResponse request with any body
	GenImageToTextWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenImageToTextResponse, error)

	// GenImageToVideoWithBodyWithResponse request with any body
	GenImageToVideoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenImageToVideoResponse, error)

	// GenLLMWithBodyWithResponse request with any body
	GenLLMWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenLLMResponse, error)

	GenLLMWithFormdataBodyWithResponse(ctx context.Context, body GenLLMFormdataRequestBody, reqEditors ...RequestEditorFn) (*GenLLMResponse, error)

	// GenSegmentAnything2WithBodyWithResponse request with any body
	GenSegmentAnything2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenSegmentAnything2Response, error)

	// GenTextToImageWithBodyWithResponse request with any body
	GenTextToImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenTextToImageResponse, error)

	GenTextToImageWithResponse(ctx context.Context, body GenTextToImageJSONRequestBody, reqEditors ...RequestEditorFn) (*GenTextToImageResponse, error)

	// GenUpscaleWithBodyWithResponse request with any body
	GenUpscaleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenUpscaleResponse, error)
}

type GenAudioToTextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TextResponse
	JSON400      *HTTPError
	JSON401      *HTTPError
	JSON413      *HTTPError
	JSON415      *HTTPError
	JSON422      *HTTPValidationError
	JSON500      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GenAudioToTextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenAudioToTextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthCheck
}

// Status returns HTTPResponse.Status
func (r HealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenImageToImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageResponse
	JSON400      *HTTPError
	JSON401      *HTTPError
	JSON422      *HTTPValidationError
	JSON500      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GenImageToImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenImageToImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenImageToTextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageToTextResponse
	JSON400      *HTTPError
	JSON401      *HTTPError
	JSON413      *HTTPError
	JSON422      *HTTPValidationError
	JSON500      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GenImageToTextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenImageToTextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenImageToVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VideoResponse
	JSON400      *HTTPError
	JSON401      *HTTPError
	JSON422      *HTTPValidationError
	JSON500      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GenImageToVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenImageToVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenLLMResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LLMResponse
	JSON400      *HTTPError
	JSON401      *HTTPError
	JSON422      *HTTPValidationError
	JSON500      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GenLLMResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenLLMResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenSegmentAnything2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MasksResponse
	JSON400      *HTTPError
	JSON401      *HTTPError
	JSON422      *HTTPValidationError
	JSON500      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GenSegmentAnything2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenSegmentAnything2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenTextToImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageResponse
	JSON400      *HTTPError
	JSON401      *HTTPError
	JSON422      *HTTPValidationError
	JSON500      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GenTextToImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenTextToImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenUpscaleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageResponse
	JSON400      *HTTPError
	JSON401      *HTTPError
	JSON422      *HTTPValidationError
	JSON500      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GenUpscaleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenUpscaleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GenAudioToTextWithBodyWithResponse request with arbitrary body returning *GenAudioToTextResponse
func (c *ClientWithResponses) GenAudioToTextWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenAudioToTextResponse, error) {
	rsp, err := c.GenAudioToTextWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenAudioToTextResponse(rsp)
}

// HealthWithResponse request returning *HealthResponse
func (c *ClientWithResponses) HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthResponse, error) {
	rsp, err := c.Health(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthResponse(rsp)
}

// GenImageToImageWithBodyWithResponse request with arbitrary body returning *GenImageToImageResponse
func (c *ClientWithResponses) GenImageToImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenImageToImageResponse, error) {
	rsp, err := c.GenImageToImageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenImageToImageResponse(rsp)
}

// GenImageToTextWithBodyWithResponse request with arbitrary body returning *GenImageToTextResponse
func (c *ClientWithResponses) GenImageToTextWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenImageToTextResponse, error) {
	rsp, err := c.GenImageToTextWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenImageToTextResponse(rsp)
}

// GenImageToVideoWithBodyWithResponse request with arbitrary body returning *GenImageToVideoResponse
func (c *ClientWithResponses) GenImageToVideoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenImageToVideoResponse, error) {
	rsp, err := c.GenImageToVideoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenImageToVideoResponse(rsp)
}

// GenLLMWithBodyWithResponse request with arbitrary body returning *GenLLMResponse
func (c *ClientWithResponses) GenLLMWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenLLMResponse, error) {
	rsp, err := c.GenLLMWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenLLMResponse(rsp)
}

func (c *ClientWithResponses) GenLLMWithFormdataBodyWithResponse(ctx context.Context, body GenLLMFormdataRequestBody, reqEditors ...RequestEditorFn) (*GenLLMResponse, error) {
	rsp, err := c.GenLLMWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenLLMResponse(rsp)
}

// GenSegmentAnything2WithBodyWithResponse request with arbitrary body returning *GenSegmentAnything2Response
func (c *ClientWithResponses) GenSegmentAnything2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenSegmentAnything2Response, error) {
	rsp, err := c.GenSegmentAnything2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenSegmentAnything2Response(rsp)
}

// GenTextToImageWithBodyWithResponse request with arbitrary body returning *GenTextToImageResponse
func (c *ClientWithResponses) GenTextToImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenTextToImageResponse, error) {
	rsp, err := c.GenTextToImageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenTextToImageResponse(rsp)
}

func (c *ClientWithResponses) GenTextToImageWithResponse(ctx context.Context, body GenTextToImageJSONRequestBody, reqEditors ...RequestEditorFn) (*GenTextToImageResponse, error) {
	rsp, err := c.GenTextToImage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenTextToImageResponse(rsp)
}

// GenUpscaleWithBodyWithResponse request with arbitrary body returning *GenUpscaleResponse
func (c *ClientWithResponses) GenUpscaleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenUpscaleResponse, error) {
	rsp, err := c.GenUpscaleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenUpscaleResponse(rsp)
}

// ParseGenAudioToTextResponse parses an HTTP response from a GenAudioToTextWithResponse call
func ParseGenAudioToTextResponse(rsp *http.Response) (*GenAudioToTextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenAudioToTextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TextResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseHealthResponse parses an HTTP response from a HealthWithResponse call
func ParseHealthResponse(rsp *http.Response) (*HealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGenImageToImageResponse parses an HTTP response from a GenImageToImageWithResponse call
func ParseGenImageToImageResponse(rsp *http.Response) (*GenImageToImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenImageToImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGenImageToTextResponse parses an HTTP response from a GenImageToTextWithResponse call
func ParseGenImageToTextResponse(rsp *http.Response) (*GenImageToTextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenImageToTextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageToTextResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGenImageToVideoResponse parses an HTTP response from a GenImageToVideoWithResponse call
func ParseGenImageToVideoResponse(rsp *http.Response) (*GenImageToVideoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenImageToVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VideoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGenLLMResponse parses an HTTP response from a GenLLMWithResponse call
func ParseGenLLMResponse(rsp *http.Response) (*GenLLMResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenLLMResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LLMResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGenSegmentAnything2Response parses an HTTP response from a GenSegmentAnything2WithResponse call
func ParseGenSegmentAnything2Response(rsp *http.Response) (*GenSegmentAnything2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenSegmentAnything2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MasksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGenTextToImageResponse parses an HTTP response from a GenTextToImageWithResponse call
func ParseGenTextToImageResponse(rsp *http.Response) (*GenTextToImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenTextToImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGenUpscaleResponse parses an HTTP response from a GenUpscaleWithResponse call
func ParseGenUpscaleResponse(rsp *http.Response) (*GenUpscaleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenUpscaleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Audio To Text
	// (POST /audio-to-text)
	GenAudioToText(w http.ResponseWriter, r *http.Request)
	// Health
	// (GET /health)
	Health(w http.ResponseWriter, r *http.Request)
	// Image To Image
	// (POST /image-to-image)
	GenImageToImage(w http.ResponseWriter, r *http.Request)
	// Image To Text
	// (POST /image-to-text)
	GenImageToText(w http.ResponseWriter, r *http.Request)
	// Image To Video
	// (POST /image-to-video)
	GenImageToVideo(w http.ResponseWriter, r *http.Request)
	// LLM
	// (POST /llm)
	GenLLM(w http.ResponseWriter, r *http.Request)
	// Segment Anything 2
	// (POST /segment-anything-2)
	GenSegmentAnything2(w http.ResponseWriter, r *http.Request)
	// Text To Image
	// (POST /text-to-image)
	GenTextToImage(w http.ResponseWriter, r *http.Request)
	// Upscale
	// (POST /upscale)
	GenUpscale(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Audio To Text
// (POST /audio-to-text)
func (_ Unimplemented) GenAudioToText(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health
// (GET /health)
func (_ Unimplemented) Health(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Image To Image
// (POST /image-to-image)
func (_ Unimplemented) GenImageToImage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Image To Text
// (POST /image-to-text)
func (_ Unimplemented) GenImageToText(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Image To Video
// (POST /image-to-video)
func (_ Unimplemented) GenImageToVideo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// LLM
// (POST /llm)
func (_ Unimplemented) GenLLM(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Segment Anything 2
// (POST /segment-anything-2)
func (_ Unimplemented) GenSegmentAnything2(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Text To Image
// (POST /text-to-image)
func (_ Unimplemented) GenTextToImage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upscale
// (POST /upscale)
func (_ Unimplemented) GenUpscale(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GenAudioToText operation middleware
func (siw *ServerInterfaceWrapper) GenAudioToText(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPBearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenAudioToText(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Health operation middleware
func (siw *ServerInterfaceWrapper) Health(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Health(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GenImageToImage operation middleware
func (siw *ServerInterfaceWrapper) GenImageToImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPBearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenImageToImage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GenImageToText operation middleware
func (siw *ServerInterfaceWrapper) GenImageToText(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPBearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenImageToText(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GenImageToVideo operation middleware
func (siw *ServerInterfaceWrapper) GenImageToVideo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPBearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenImageToVideo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GenLLM operation middleware
func (siw *ServerInterfaceWrapper) GenLLM(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPBearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenLLM(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GenSegmentAnything2 operation middleware
func (siw *ServerInterfaceWrapper) GenSegmentAnything2(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPBearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenSegmentAnything2(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GenTextToImage operation middleware
func (siw *ServerInterfaceWrapper) GenTextToImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPBearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenTextToImage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GenUpscale operation middleware
func (siw *ServerInterfaceWrapper) GenUpscale(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPBearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenUpscale(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/audio-to-text", wrapper.GenAudioToText)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.Health)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/image-to-image", wrapper.GenImageToImage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/image-to-text", wrapper.GenImageToText)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/image-to-video", wrapper.GenImageToVideo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/llm", wrapper.GenLLM)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/segment-anything-2", wrapper.GenSegmentAnything2)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/text-to-image", wrapper.GenTextToImage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/upscale", wrapper.GenUpscale)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"VgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
