// Package worker provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package worker

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	HTTPBearerScopes = "HTTPBearer.Scopes"
)

// APIError API error response model.
type APIError struct {
	// Msg The error message.
	Msg string `json:"msg"`
}

// BodyAudioToTextAudioToTextPost defines model for Body_audio_to_text_audio_to_text_post.
type BodyAudioToTextAudioToTextPost struct {
	// Audio Uploaded audio file to be transcribed.
	Audio openapi_types.File `json:"audio"`

	// ModelId Hugging Face model ID used for transcription.
	ModelId *string `json:"model_id,omitempty"`
}

// BodyImageToImageImageToImagePost defines model for Body_image_to_image_image_to_image_post.
type BodyImageToImageImageToImagePost struct {
	// GuidanceScale Encourages model to generate images closely linked to the text prompt (higher values may reduce image quality).
	GuidanceScale *float32 `json:"guidance_scale,omitempty"`

	// Image Uploaded image to modify with the pipeline.
	Image openapi_types.File `json:"image"`

	// ImageGuidanceScale Degree to which the generated image is pushed towards the initial image.
	ImageGuidanceScale *float32 `json:"image_guidance_scale,omitempty"`

	// ModelId Hugging Face model ID used for image generation.
	ModelId *string `json:"model_id,omitempty"`

	// NegativePrompt Text prompt(s) to guide what to exclude from image generation. Ignored if guidance_scale < 1.
	NegativePrompt *string `json:"negative_prompt,omitempty"`

	// NumImagesPerPrompt Number of images to generate per prompt.
	NumImagesPerPrompt *int `json:"num_images_per_prompt,omitempty"`

	// NumInferenceSteps Number of denoising steps. More steps usually lead to higher quality images but slower inference. Modulated by strength.
	NumInferenceSteps *int `json:"num_inference_steps,omitempty"`

	// Prompt Text prompt(s) to guide image generation.
	Prompt string `json:"prompt"`

	// SafetyCheck Perform a safety check to estimate if generated images could be offensive or harmful.
	SafetyCheck *bool `json:"safety_check,omitempty"`

	// Seed Seed for random number generation.
	Seed *int `json:"seed,omitempty"`

	// Strength Degree of transformation applied to the reference image (0 to 1).
	Strength *float32 `json:"strength,omitempty"`
}

// BodyImageToVideoImageToVideoPost defines model for Body_image_to_video_image_to_video_post.
type BodyImageToVideoImageToVideoPost struct {
	// Fps The frames per second of the generated video.
	Fps *int `json:"fps,omitempty"`

	// Height The height in pixels of the generated video.
	Height *int `json:"height,omitempty"`

	// Image Uploaded image to generate a video from.
	Image openapi_types.File `json:"image"`

	// ModelId Hugging Face model ID used for video generation.
	ModelId *string `json:"model_id,omitempty"`

	// MotionBucketId Used for conditioning the amount of motion for the generation. The higher the number the more motion will be in the video.
	MotionBucketId *int `json:"motion_bucket_id,omitempty"`

	// NoiseAugStrength Amount of noise added to the conditioning image. Higher values reduce resemblance to the conditioning image and increase motion.
	NoiseAugStrength *float32 `json:"noise_aug_strength,omitempty"`

	// NumInferenceSteps Number of denoising steps. More steps usually lead to higher quality images but slower inference. Modulated by strength.
	NumInferenceSteps *int `json:"num_inference_steps,omitempty"`

	// SafetyCheck Perform a safety check to estimate if generated images could be offensive or harmful.
	SafetyCheck *bool `json:"safety_check,omitempty"`

	// Seed Seed for random number generation.
	Seed *int `json:"seed,omitempty"`

	// Width The width in pixels of the generated video.
	Width *int `json:"width,omitempty"`
}

// BodySegmentAnything2SegmentAnything2Post defines model for Body_segment_anything_2_segment_anything_2_post.
type BodySegmentAnything2SegmentAnything2Post struct {
	// Box A length 4 array given as a box prompt to the model, in XYXY format.
	Box *string `json:"box,omitempty"`

	// Image Image to segment.
	Image openapi_types.File `json:"image"`

	// MaskInput A low-resolution mask input to the model, typically from a previous prediction iteration, with the form 1xHxW (H=W=256 for SAM).
	MaskInput *string `json:"mask_input,omitempty"`

	// ModelId Hugging Face model ID used for image generation.
	ModelId *string `json:"model_id,omitempty"`

	// MultimaskOutput If true, the model will return three masks for ambiguous input prompts, often producing better masks than a single prediction.
	MultimaskOutput *bool `json:"multimask_output,omitempty"`

	// NormalizeCoords If true, the point coordinates will be normalized to the range [0,1], with point_coords expected to be with respect to image dimensions.
	NormalizeCoords *bool `json:"normalize_coords,omitempty"`

	// PointCoords Nx2 array of point prompts to the model, where each point is in (X,Y) in pixels.
	PointCoords *string `json:"point_coords,omitempty"`

	// PointLabels Labels for the point prompts, where 1 indicates a foreground point and 0 indicates a background point.
	PointLabels *string `json:"point_labels,omitempty"`

	// ReturnLogits If true, returns un-thresholded mask logits instead of a binary mask.
	ReturnLogits *bool `json:"return_logits,omitempty"`
}

// BodyUpscaleUpscalePost defines model for Body_upscale_upscale_post.
type BodyUpscaleUpscalePost struct {
	// Image Uploaded image to modify with the pipeline.
	Image openapi_types.File `json:"image"`

	// ModelId Hugging Face model ID used for upscaled image generation.
	ModelId *string `json:"model_id,omitempty"`

	// NumInferenceSteps Number of denoising steps. More steps usually lead to higher quality images but slower inference. Modulated by strength.
	NumInferenceSteps *int `json:"num_inference_steps,omitempty"`

	// Prompt Text prompt(s) to guide upscaled image generation.
	Prompt string `json:"prompt"`

	// SafetyCheck Perform a safety check to estimate if generated images could be offensive or harmful.
	SafetyCheck *bool `json:"safety_check,omitempty"`

	// Seed Seed for random number generation.
	Seed *int `json:"seed,omitempty"`
}

// HTTPError HTTP error response model.
type HTTPError struct {
	// Detail Detailed error information.
	Detail APIError `json:"detail"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// HealthCheck defines model for HealthCheck.
type HealthCheck struct {
	Status *string `json:"status,omitempty"`
}

// ImageResponse Response model for image generation.
type ImageResponse struct {
	// Images The generated images.
	Images []Media `json:"images"`
}

// MasksResponse Response model for object segmentation.
type MasksResponse struct {
	// Logits The raw, unnormalized predictions (logits) for the masks.
	Logits string `json:"logits"`

	// Masks The generated masks.
	Masks string `json:"masks"`

	// Scores The model's confidence scores for each generated mask.
	Scores string `json:"scores"`
}

// Media A media object containing information about the generated media.
type Media struct {
	// Nsfw Whether the media was flagged as NSFW.
	Nsfw bool `json:"nsfw"`

	// Seed The seed used to generate the media.
	Seed int `json:"seed"`

	// Url The URL where the media can be accessed.
	Url string `json:"url"`
}

// TextResponse Response model for text generation.
type TextResponse struct {
	// Chunks The generated text chunks.
	Chunks []Chunk `json:"chunks"`

	// Text The generated text.
	Text string `json:"text"`
}

// TextToImageParams defines model for TextToImageParams.
type TextToImageParams struct {
	// GuidanceScale Encourages model to generate images closely linked to the text prompt (higher values may reduce image quality).
	GuidanceScale *float32 `json:"guidance_scale,omitempty"`

	// Height The height in pixels of the generated image.
	Height *int `json:"height,omitempty"`

	// ModelId Hugging Face model ID used for image generation.
	ModelId *string `json:"model_id,omitempty"`

	// NegativePrompt Text prompt(s) to guide what to exclude from image generation. Ignored if guidance_scale < 1.
	NegativePrompt *string `json:"negative_prompt,omitempty"`

	// NumImagesPerPrompt Number of images to generate per prompt.
	NumImagesPerPrompt *int `json:"num_images_per_prompt,omitempty"`

	// NumInferenceSteps Number of denoising steps. More steps usually lead to higher quality images but slower inference. Modulated by strength.
	NumInferenceSteps *int `json:"num_inference_steps,omitempty"`

	// Prompt Text prompt(s) to guide image generation. Separate multiple prompts with '|' if supported by the model.
	Prompt string `json:"prompt"`

	// SafetyCheck Perform a safety check to estimate if generated images could be offensive or harmful.
	SafetyCheck *bool `json:"safety_check,omitempty"`

	// Seed Seed for random number generation.
	Seed *int `json:"seed,omitempty"`

	// Width The width in pixels of the generated image.
	Width *int `json:"width,omitempty"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// VideoResponse Response model for video generation.
type VideoResponse struct {
	// Frames The generated video frames.
	Frames [][]Media `json:"frames"`
}

// Chunk A chunk of text with a timestamp.
type Chunk struct {
	// Text The text of the chunk.
	Text string `json:"text"`

	// Timestamp The timestamp of the chunk.
	Timestamp []interface{} `json:"timestamp"`
}

// AudioToTextAudioToTextPostMultipartRequestBody defines body for AudioToTextAudioToTextPost for multipart/form-data ContentType.
type AudioToTextAudioToTextPostMultipartRequestBody = BodyAudioToTextAudioToTextPost

// ImageToImageImageToImagePostMultipartRequestBody defines body for ImageToImageImageToImagePost for multipart/form-data ContentType.
type ImageToImageImageToImagePostMultipartRequestBody = BodyImageToImageImageToImagePost

// ImageToVideoImageToVideoPostMultipartRequestBody defines body for ImageToVideoImageToVideoPost for multipart/form-data ContentType.
type ImageToVideoImageToVideoPostMultipartRequestBody = BodyImageToVideoImageToVideoPost

// SegmentAnything2SegmentAnything2PostMultipartRequestBody defines body for SegmentAnything2SegmentAnything2Post for multipart/form-data ContentType.
type SegmentAnything2SegmentAnything2PostMultipartRequestBody = BodySegmentAnything2SegmentAnything2Post

// GenTextToImageJSONRequestBody defines body for GenTextToImage for application/json ContentType.
type GenTextToImageJSONRequestBody = TextToImageParams

// UpscaleUpscalePostMultipartRequestBody defines body for UpscaleUpscalePost for multipart/form-data ContentType.
type UpscaleUpscalePostMultipartRequestBody = BodyUpscaleUpscalePost

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AudioToTextAudioToTextPostWithBody request with any body
	AudioToTextAudioToTextPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HealthHealthGet request
	HealthHealthGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImageToImageImageToImagePostWithBody request with any body
	ImageToImageImageToImagePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImageToVideoImageToVideoPostWithBody request with any body
	ImageToVideoImageToVideoPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SegmentAnything2SegmentAnything2PostWithBody request with any body
	SegmentAnything2SegmentAnything2PostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenTextToImageWithBody request with any body
	GenTextToImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenTextToImage(ctx context.Context, body GenTextToImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpscaleUpscalePostWithBody request with any body
	UpscaleUpscalePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AudioToTextAudioToTextPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAudioToTextAudioToTextPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HealthHealthGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthHealthGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImageToImageImageToImagePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImageToImageImageToImagePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImageToVideoImageToVideoPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImageToVideoImageToVideoPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SegmentAnything2SegmentAnything2PostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSegmentAnything2SegmentAnything2PostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenTextToImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenTextToImageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenTextToImage(ctx context.Context, body GenTextToImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenTextToImageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpscaleUpscalePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpscaleUpscalePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAudioToTextAudioToTextPostRequestWithBody generates requests for AudioToTextAudioToTextPost with any type of body
func NewAudioToTextAudioToTextPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio-to-text")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHealthHealthGetRequest generates requests for HealthHealthGet
func NewHealthHealthGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImageToImageImageToImagePostRequestWithBody generates requests for ImageToImageImageToImagePost with any type of body
func NewImageToImageImageToImagePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/image-to-image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImageToVideoImageToVideoPostRequestWithBody generates requests for ImageToVideoImageToVideoPost with any type of body
func NewImageToVideoImageToVideoPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/image-to-video")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSegmentAnything2SegmentAnything2PostRequestWithBody generates requests for SegmentAnything2SegmentAnything2Post with any type of body
func NewSegmentAnything2SegmentAnything2PostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segment-anything-2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenTextToImageRequest calls the generic GenTextToImage builder with application/json body
func NewGenTextToImageRequest(server string, body GenTextToImageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenTextToImageRequestWithBody(server, "application/json", bodyReader)
}

// NewGenTextToImageRequestWithBody generates requests for GenTextToImage with any type of body
func NewGenTextToImageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/text-to-image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpscaleUpscalePostRequestWithBody generates requests for UpscaleUpscalePost with any type of body
func NewUpscaleUpscalePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/upscale")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AudioToTextAudioToTextPostWithBodyWithResponse request with any body
	AudioToTextAudioToTextPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AudioToTextAudioToTextPostResponse, error)

	// HealthHealthGetWithResponse request
	HealthHealthGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthHealthGetResponse, error)

	// ImageToImageImageToImagePostWithBodyWithResponse request with any body
	ImageToImageImageToImagePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImageToImageImageToImagePostResponse, error)

	// ImageToVideoImageToVideoPostWithBodyWithResponse request with any body
	ImageToVideoImageToVideoPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImageToVideoImageToVideoPostResponse, error)

	// SegmentAnything2SegmentAnything2PostWithBodyWithResponse request with any body
	SegmentAnything2SegmentAnything2PostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SegmentAnything2SegmentAnything2PostResponse, error)

	// GenTextToImageWithBodyWithResponse request with any body
	GenTextToImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenTextToImageResponse, error)

	GenTextToImageWithResponse(ctx context.Context, body GenTextToImageJSONRequestBody, reqEditors ...RequestEditorFn) (*GenTextToImageResponse, error)

	// UpscaleUpscalePostWithBodyWithResponse request with any body
	UpscaleUpscalePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpscaleUpscalePostResponse, error)
}

type AudioToTextAudioToTextPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TextResponse
	JSON400      *HTTPError
	JSON401      *HTTPError
	JSON413      *HTTPError
	JSON422      *HTTPValidationError
	JSON500      *HTTPError
}

// Status returns HTTPResponse.Status
func (r AudioToTextAudioToTextPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AudioToTextAudioToTextPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthHealthGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthCheck
}

// Status returns HTTPResponse.Status
func (r HealthHealthGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthHealthGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImageToImageImageToImagePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageResponse
	JSON400      *HTTPError
	JSON401      *HTTPError
	JSON422      *HTTPValidationError
	JSON500      *HTTPError
}

// Status returns HTTPResponse.Status
func (r ImageToImageImageToImagePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImageToImageImageToImagePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImageToVideoImageToVideoPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VideoResponse
	JSON400      *HTTPError
	JSON401      *HTTPError
	JSON422      *HTTPValidationError
	JSON500      *HTTPError
}

// Status returns HTTPResponse.Status
func (r ImageToVideoImageToVideoPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImageToVideoImageToVideoPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SegmentAnything2SegmentAnything2PostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MasksResponse
	JSON400      *HTTPError
	JSON401      *HTTPError
	JSON422      *HTTPValidationError
	JSON500      *HTTPError
}

// Status returns HTTPResponse.Status
func (r SegmentAnything2SegmentAnything2PostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SegmentAnything2SegmentAnything2PostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenTextToImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageResponse
	JSON400      *HTTPError
	JSON401      *HTTPError
	JSON422      *HTTPValidationError
	JSON500      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GenTextToImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenTextToImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpscaleUpscalePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageResponse
	JSON400      *HTTPError
	JSON401      *HTTPError
	JSON422      *HTTPValidationError
	JSON500      *HTTPError
}

// Status returns HTTPResponse.Status
func (r UpscaleUpscalePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpscaleUpscalePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AudioToTextAudioToTextPostWithBodyWithResponse request with arbitrary body returning *AudioToTextAudioToTextPostResponse
func (c *ClientWithResponses) AudioToTextAudioToTextPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AudioToTextAudioToTextPostResponse, error) {
	rsp, err := c.AudioToTextAudioToTextPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAudioToTextAudioToTextPostResponse(rsp)
}

// HealthHealthGetWithResponse request returning *HealthHealthGetResponse
func (c *ClientWithResponses) HealthHealthGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthHealthGetResponse, error) {
	rsp, err := c.HealthHealthGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthHealthGetResponse(rsp)
}

// ImageToImageImageToImagePostWithBodyWithResponse request with arbitrary body returning *ImageToImageImageToImagePostResponse
func (c *ClientWithResponses) ImageToImageImageToImagePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImageToImageImageToImagePostResponse, error) {
	rsp, err := c.ImageToImageImageToImagePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImageToImageImageToImagePostResponse(rsp)
}

// ImageToVideoImageToVideoPostWithBodyWithResponse request with arbitrary body returning *ImageToVideoImageToVideoPostResponse
func (c *ClientWithResponses) ImageToVideoImageToVideoPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImageToVideoImageToVideoPostResponse, error) {
	rsp, err := c.ImageToVideoImageToVideoPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImageToVideoImageToVideoPostResponse(rsp)
}

// SegmentAnything2SegmentAnything2PostWithBodyWithResponse request with arbitrary body returning *SegmentAnything2SegmentAnything2PostResponse
func (c *ClientWithResponses) SegmentAnything2SegmentAnything2PostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SegmentAnything2SegmentAnything2PostResponse, error) {
	rsp, err := c.SegmentAnything2SegmentAnything2PostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSegmentAnything2SegmentAnything2PostResponse(rsp)
}

// GenTextToImageWithBodyWithResponse request with arbitrary body returning *GenTextToImageResponse
func (c *ClientWithResponses) GenTextToImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenTextToImageResponse, error) {
	rsp, err := c.GenTextToImageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenTextToImageResponse(rsp)
}

func (c *ClientWithResponses) GenTextToImageWithResponse(ctx context.Context, body GenTextToImageJSONRequestBody, reqEditors ...RequestEditorFn) (*GenTextToImageResponse, error) {
	rsp, err := c.GenTextToImage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenTextToImageResponse(rsp)
}

// UpscaleUpscalePostWithBodyWithResponse request with arbitrary body returning *UpscaleUpscalePostResponse
func (c *ClientWithResponses) UpscaleUpscalePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpscaleUpscalePostResponse, error) {
	rsp, err := c.UpscaleUpscalePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpscaleUpscalePostResponse(rsp)
}

// ParseAudioToTextAudioToTextPostResponse parses an HTTP response from a AudioToTextAudioToTextPostWithResponse call
func ParseAudioToTextAudioToTextPostResponse(rsp *http.Response) (*AudioToTextAudioToTextPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AudioToTextAudioToTextPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TextResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseHealthHealthGetResponse parses an HTTP response from a HealthHealthGetWithResponse call
func ParseHealthHealthGetResponse(rsp *http.Response) (*HealthHealthGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthHealthGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseImageToImageImageToImagePostResponse parses an HTTP response from a ImageToImageImageToImagePostWithResponse call
func ParseImageToImageImageToImagePostResponse(rsp *http.Response) (*ImageToImageImageToImagePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImageToImageImageToImagePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseImageToVideoImageToVideoPostResponse parses an HTTP response from a ImageToVideoImageToVideoPostWithResponse call
func ParseImageToVideoImageToVideoPostResponse(rsp *http.Response) (*ImageToVideoImageToVideoPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImageToVideoImageToVideoPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VideoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSegmentAnything2SegmentAnything2PostResponse parses an HTTP response from a SegmentAnything2SegmentAnything2PostWithResponse call
func ParseSegmentAnything2SegmentAnything2PostResponse(rsp *http.Response) (*SegmentAnything2SegmentAnything2PostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SegmentAnything2SegmentAnything2PostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MasksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGenTextToImageResponse parses an HTTP response from a GenTextToImageWithResponse call
func ParseGenTextToImageResponse(rsp *http.Response) (*GenTextToImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenTextToImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpscaleUpscalePostResponse parses an HTTP response from a UpscaleUpscalePostWithResponse call
func ParseUpscaleUpscalePostResponse(rsp *http.Response) (*UpscaleUpscalePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpscaleUpscalePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Audio To Text
	// (POST /audio-to-text)
	AudioToTextAudioToTextPost(w http.ResponseWriter, r *http.Request)
	// Health
	// (GET /health)
	HealthHealthGet(w http.ResponseWriter, r *http.Request)
	// Image To Image
	// (POST /image-to-image)
	ImageToImageImageToImagePost(w http.ResponseWriter, r *http.Request)
	// Image To Video
	// (POST /image-to-video)
	ImageToVideoImageToVideoPost(w http.ResponseWriter, r *http.Request)
	// Segment Anything 2
	// (POST /segment-anything-2)
	SegmentAnything2SegmentAnything2Post(w http.ResponseWriter, r *http.Request)
	// Text To Image
	// (POST /text-to-image)
	GenTextToImage(w http.ResponseWriter, r *http.Request)
	// Upscale
	// (POST /upscale)
	UpscaleUpscalePost(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Audio To Text
// (POST /audio-to-text)
func (_ Unimplemented) AudioToTextAudioToTextPost(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health
// (GET /health)
func (_ Unimplemented) HealthHealthGet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Image To Image
// (POST /image-to-image)
func (_ Unimplemented) ImageToImageImageToImagePost(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Image To Video
// (POST /image-to-video)
func (_ Unimplemented) ImageToVideoImageToVideoPost(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Segment Anything 2
// (POST /segment-anything-2)
func (_ Unimplemented) SegmentAnything2SegmentAnything2Post(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Text To Image
// (POST /text-to-image)
func (_ Unimplemented) GenTextToImage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upscale
// (POST /upscale)
func (_ Unimplemented) UpscaleUpscalePost(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AudioToTextAudioToTextPost operation middleware
func (siw *ServerInterfaceWrapper) AudioToTextAudioToTextPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPBearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AudioToTextAudioToTextPost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// HealthHealthGet operation middleware
func (siw *ServerInterfaceWrapper) HealthHealthGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthHealthGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ImageToImageImageToImagePost operation middleware
func (siw *ServerInterfaceWrapper) ImageToImageImageToImagePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPBearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ImageToImageImageToImagePost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ImageToVideoImageToVideoPost operation middleware
func (siw *ServerInterfaceWrapper) ImageToVideoImageToVideoPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPBearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ImageToVideoImageToVideoPost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SegmentAnything2SegmentAnything2Post operation middleware
func (siw *ServerInterfaceWrapper) SegmentAnything2SegmentAnything2Post(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPBearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SegmentAnything2SegmentAnything2Post(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GenTextToImage operation middleware
func (siw *ServerInterfaceWrapper) GenTextToImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPBearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenTextToImage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpscaleUpscalePost operation middleware
func (siw *ServerInterfaceWrapper) UpscaleUpscalePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPBearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpscaleUpscalePost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/audio-to-text", wrapper.AudioToTextAudioToTextPost)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.HealthHealthGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/image-to-image", wrapper.ImageToImageImageToImagePost)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/image-to-video", wrapper.ImageToVideoImageToVideoPost)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/segment-anything-2", wrapper.SegmentAnything2SegmentAnything2Post)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/text-to-image", wrapper.GenTextToImage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/upscale", wrapper.UpscaleUpscalePost)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
